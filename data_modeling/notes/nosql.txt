##################################
when to use NoSQL database 
##################################
1. large amounts of data
relational db can only scale vertically = add more resources to a single machine = not distributed databases
you are limited by the amount of data you can store on one machine

2. need to store data in different data types formats
not designed to handle non-structured (ie JSON) data

3. need high thoroughput = fast reads
while ACID transactions add benefits, they slow down the process of reading and writing data

4. flexible schemas
allow columns to be added that do not have to be used by every row 
saving disk space bc in RDBMS nulls take up space

5. need high availability 
bc relational db are one one machine = single point of failure 
even if there is a rollover backup system, recovery takes time
a distributed system has higher availability 

6. need to scale horizonally
can add more machines to system to increase performance and space for data

7. users are distributed + want low latency 

high availability + horizonal scaling > evolution of NoSQL DB

NoSQL database
simpler design
simpler horizontal scaling
finer control of availability 
data structures used are different > make some operations faster

##################################
common types of NoSQL databases
##################################
Apache Cassandra = Partition Row store
data distributed by partitions across servers
data organized in columns + rows format

MongoDB = Document store
in addition to key lookups performed by a key-value store
the database offers an API or query language that retrieves document based on its contents
easy to search documents 

AWS DynamoDB = Key-Value store
data is collected as key and value pairs

Apache HBase = Wide column store
also uses tables, rows, and columns
but the names and the formats of the columns can vary from row to row on the same table = flexible schema

Neo4J = Graph database
data is all about relationships
data is represented as nodes and edges

##################################
Apache Cassandra 
##################################
keyspace = collection of tables
table = group of partitions
rows = single item

partitions
fundamental unit of access
collection of rows 
how the data is distributed

primary key = made up of partition key and clustering columns

columns
clustering columns + data columns
these are the data elements 

provides scalability + high availability without compromising performance
proven fault-tolerance
uses its own query language CQL (similar to SQL)

linear scalability
add nodes + the write performance will increase in a linear fashion

full table scans are highly frowned upon
bc you may be joining tables from hundreds or thousands of servers

replication factor = # of copies of data
if only working on 1 node then replication_factor = 1

need to know what queries you will be performing on data when dealing with Cassandra
if a common query is
select * from music_library where year = 1970
then need to make year the partition key in order to keep rows with the same year close together 
make artist_name the clustering column to make each primary key unique
assuming an artist does not release more than one album per year

on a real production system you would never run a select * or select count(*)
need to avoid running a broad query that will be checking data across multiple nodes

masterless architecture
no single point of failure 
highly available = system is always up, no downtime

nodes = server 
as you add more nodes to the system, your performance will increase linearly

######################
distributed database
######################
database made up of multiple machines
need to keep copies of your data on multiple machines
ensures that the data is still available when a node goes down

eventual consistency
if over time, if no new changes are made, then the value of the data should be consistent across machines
if changes/updates are made > data may be inconsistent on the different machines
inconsistencies usually only last for a few seconds
there are workarounds to avoid getting stale data

what does the network look like? 
In Apache Cassandra every node is connected to every node -- it's peer to peer database architecture

#######################
CAP theorem
#######################
consistency
every read from the database gets the latest + correct piece of data
OR it gets an error

availability
every request is received + response is given
no guarantee that the data is the latest update

partition tolerance 
the system continues to work regardless if you lose network connectivity between nodes

Cassandra + other NoSQL databases choose to be highly available at the cost of consistency
it is an AP (availability + partition tolerant) database

is eventual consistency the opposite of what is promised by SQL databases per the ACID principle?

consistency in ACID principle = only transactions that abide by constraints + database rules > written to DB
otherwise the database is kept in its consistent state
aka the data should be correct across all rows + tables

CAP consistency = every read from the DB gets the latest piece of data or an error
aka all replicas of the same data will be the same value across a distributed system

ACID = on write 
CAP = on read 

https://www.voltdb.com/blog/2015/10/22/disambiguating-acid-cap/
CAP
for a system to be distributed = it has network partitions
in the face of network partitions, you can't always have perfect consistency + 100% availability
plan accordingly

how do they differ?
ACID consistency is all about database rules
CAP consistency promises that every replica of the same logical value, spread across multiple nodes, has the same exact value at all times

####################################
denormalization in Apache Cassandra
####################################
denormalization must be done for fast reads
you need to think about your queries first
ad-hoc querying is not ideal with Cassandra

there are no JOINS in Cassandra
without JOINS you can only query on one table at a time

one table per query = great strategy
inevitable to have duplicate data

the performance benefits + high availability far outweigh additional storage costs
losing customers to outages or poor performance = expensive

CQL = similiar to SQL but no joins, group by, or subqueries

use WHERE clause to determine what to partition on
